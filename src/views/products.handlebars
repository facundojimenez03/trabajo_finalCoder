
<body style="background-color: #f0f0f5; font-family: 'Poppins', sans-serif;">
    <div class="container mt-4">
        {{#if user}}
            {{#if (equals user.role "user")}}
                <div class="alert alert-dark text-center" style="background-color: #393E46; color: #EEEEEE;">
                    Bienvenido, <strong>{{user.first_name}}</strong>
                </div>
            {{else}}
                <div class="alert alert-secondary text-center" style="background-color: #00ADB5; color: #ffffff;">
                    Bienvenido, usuario {{user.role}}: <strong>{{user.first_name}}</strong>
                </div>
            {{/if}}
        {{else}}
            <div class="alert text-center" style="background-color: #0aa1a1; color: #212529;">
                Accede para empezar a comprar.
                <a href="/" class="btn" style="background-color: #00ADB5; color: white; margin-left: 10px;">Iniciar</a>
            </div>
        {{/if}}
    </div>

   

    <div class="container mt-5">
    <div class="row">
        
        <aside id="fixed-filters" class="col-lg-3 col-md-4 col-sm-12 mb-4" style="background-color: #EEEEEE; border-radius: 12px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            <div>
                <!-- Título de los filtros -->
                <h5 class="text-center" style="color: #393E46;">Filtros</h5>

                <!-- Palabra clave -->
                <div class="form-group mb-3">
                    <label for="query" style="color: #393E46;">Palabra clave</label>
                    <input type="text" id="query" class="form-control" style="border-radius: 12px;" oninput="fetchProducts()">
                </div>

                <!-- Ordenar por precio -->
                <div class="form-group mb-3">
                    <label for="sort" style="color: #393E46;">Ordenar por precio</label>
                    <select id="sort" class="form-select" style="border-radius: 12px;" onchange="fetchProducts()">
                        <option value="">Ninguno</option>
                        <option value="asc">De menor a mayor</option>
                        <option value="desc">De mayor a menor</option>
                    </select>
                </div>

                <!-- Límite -->
                <div class="form-group mb-3">
                    <label for="limit" style="color: #393E46;">Límite</label>
                    <select id="limit" class="form-select" style="border-radius: 12px;" onchange="fetchProducts()">
                        <option value="3">3</option>
                        <option value="6">6</option>
                        <option value="10" selected>10</option>
                        <option value="20">20</option>
                    </select>
                </div>

                <!-- Categoría -->
                <div class="form-group mb-3">
                    <label for="categoryFilter" style="color: #393E46;">Categoría</label>
                    <div id="categoryFilter"></div>
                </div>

                <!-- Botón de eliminar filtros -->
                <div class="text-center">
                    <a href="/products" class="btn btn-outline-secondary" style="border-radius: 12px;">Eliminar filtros</a>
                </div>
            </div>
        </aside>

        <!-- Contenido principal (productos) a la derecha -->
        <main class="col-lg-9 col-md-8 col-sm-12">
            <!-- Mensaje de error (si aplica) -->
            <div id="error-message" class="alert alert-danger" style="display: none; border-radius: 12px;"></div>

            <!-- Paginación (arriba) -->
            <nav aria-label="Page navigation">
                <ul id="pagination" class="pagination justify-content-center"></ul>
            </nav>

            <!-- Lista de productos -->
            <div id="products" class="row mt-4" style="display: flex; justify-content:space-evenly">
            </div>

            <!-- Paginación (abajo) -->
            <nav aria-label="Page navigation">
                <ul id="pagination" class="pagination justify-content-center"></ul>
            </nav>
        </main>
    </div>
</div>


    <script>
        function formatDate(dateString) {
            const options = {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
            };
            const date = new Date(dateString);
            return date.toLocaleDateString('es-AR', options);
        }

        document.addEventListener('DOMContentLoaded', async () => {
            await loadCategories();
            fetchProducts();

            const fixedFilters = document.getElementById('fixed-filters');
            const mainContent = document.querySelector('main');

            const adjustFiltersPosition = () => {
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                const topPosition = mainContent.offsetTop - scrollTop;
                fixedFilters.style.top = `${Math.max(topPosition, 20)}px`;
            };

            window.addEventListener('scroll', adjustFiltersPosition);
            window.addEventListener('resize', adjustFiltersPosition);
        });

        async function loadCategories() {
            const response = await fetch('/api/products/categories');
            const data = await response.json();
            const categoryDiv = document.getElementById('categoryFilter');

            if (data.status === 'success') {
                categoryDiv.innerHTML = data.categories.map(category => `
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="category-${category}" value="${category}" onchange="fetchProducts()">
                        <label class="form-check-label" for="category-${category}">${category}</label>
                    </div>
                `).join('');
            }
        }

        async function fetchProducts(page = 1) {
            const limit = document.getElementById('limit').value;
            const sort = document.getElementById('sort').value;
            const query = document.getElementById('query').value;
            const categories = Array.from(document.querySelectorAll('.form-check-input:checked')).map(input => input.value);

            let url = `/api/products?limit=${limit}&page=${page}`;
            if (sort) url += `&sort=${sort}`;
            if (query) url += `&query=${query}`;
            if (categories.length > 0) url += `&categories=${categories.join(',')}`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.status === 'success') {
                    const productsDiv = document.getElementById('products');
                    const paginationDiv = document.getElementById('pagination');
                    const errorMessageDiv = document.getElementById('error-message');

                    errorMessageDiv.style.display = 'none';
                    productsDiv.innerHTML = data.payload.map(product => `
                        <div class="col-md-3 mb-3">
                            <div class="card">
                                <img src="${product.thumbnail}" class="card-img-top img-fluid" alt="${product.description}">
                                <div class="card-body">
                                    <h5 class="card-title">${product.name}</h5>
                                    <p class="card-text">${product.description}</p>
                                    <p class="card-text"><strong>Precio:</strong> $${product.price}</p>
                                    <p class="card-text"><strong>Stock:</strong> ${product.stock}</p>
                                    {{#if (different user.role "admin")}}
                                        ${product.stock === 0 ?
                                        `<button class="btn btn-danger" style="cursor: not-allowed" disabled>Sin stock</button>` : 
                                        (product.stock !== 0 ? 
                                            `<button class="add-cart btn btn-success" data-product-id="${product._id}" data-product-stock="${product.stock}">Agregar al carrito</button>` : 
                                            ``)}
                                    {{/if}}
                                </div>
                            </div>
                        </div>
                    `).join('');

                    paginationDiv.innerHTML = `
                        ${data.hasPrevPage ? `<li class="page-item"><a class="page-link" href="#" onclick="fetchProducts(${data.prevPage})">Anterior</a></li>` : ''}
                        <li class="page-item disabled"><a class="page-link" href="#">Página ${data.page} de ${data.totalPages}</a></li>
                        ${data.hasNextPage ? `<li class="page-item"><a class="page-link" href="#" onclick="fetchProducts(${data.nextPage})">Siguiente</a></li>` : ''}
                    `;

                    addToCart();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                const errorMessageDiv = document.getElementById('error-message');
                errorMessageDiv.textContent = error.message;
                errorMessageDiv.style.display = 'block';
                document.getElementById('products').innerHTML = '';
                document.getElementById('pagination').innerHTML = '';
            }
        }

        function addToCart() {
        document.querySelectorAll('.add-cart').forEach(button => {
            button.addEventListener('click', async (event) => {
                const productId = button.getAttribute('data-product-id')
                const cartId = '{{cartId}}'
                const productStock = parseInt(button.getAttribute('data-product-stock'), 10)

              try {
    const { value: cantidad } = await Swal.fire({
        title: 'Elige la cantidad',
        input: 'number',
        inputLabel: `Cantidad disponible (máximo ${productStock} unidades):`,
        inputPlaceholder: 'Introduce la cantidad',
        inputAttributes: {
            min: 1,
            max: productStock,
            step: 1
        },
        showCancelButton: true,
        confirmButtonText: 'Añadir al carrito',
        cancelButtonText: 'Cancelar',
        allowOutsideClick: false,
        inputValidator: (value) => {
            const cantidad = parseInt(value, 10);
            if (!value) {
                return 'Ingresa una cantidad';
            } else if (cantidad > productStock) {
                return `Puedes agregar un máximo de ${productStock} unidades`;
            } else if (cantidad < 1) {
                return 'Minimo 1 unidad';
            }
        }
    })

                    if (cantidad) {
                        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ productId, cantidad })
                        })
                        const data = await response.json()

                        if (data.status === 'success') {
                            Swal.fire({
                                title: '¡Éxito!',
                                text: 'Producto agregado al carrito.',
                                icon: 'success',
                                showCancelButton: true,
                                confirmButtonText: 'Ir al carrito',
                                cancelButtonText: 'Continuar comprando'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = `/carts/${cartId}`
                                }
                            })
                        } else {
                            Swal.fire('Error', 'No se pudo agregar', 'error')
                        }
                    }
                } catch (error) {
                    Swal.fire('Error', 'Necesita estar logueado', 'error')
                }
            })
        })
    }
    </script>
</body>