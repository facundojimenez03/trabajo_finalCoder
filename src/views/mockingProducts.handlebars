
<body>
    {{#if user}}
        {{#if (equals user.role "user")}}
            <h3 class="text-left">¡Hola, 
                <strong style="color: #2c3e50;">
                    {{user.first_name}}
                </strong>
            </h3>
        {{else}}
            <h3 style="color: #34495e;">
                Bienvenido, usuario {{user.role}}:
            </h3>
            <h3 style="color: #2980b9;">
                <strong>{{user.first_name}}</strong>
            </h3>
        {{/if}}
    {{else}}
        <p>
            Inicia sesión para acceder a las compras
            <a href="/" class="btn btn-secondary">Iniciar sesión</a>
        </p>
    {{/if}}

    <div class="container-fluid mt-5" style="max-width: 1200px;">
        <div class="row mb-4">
            <div id="fixed-filters" class="fixed-filters col-md-3" 
                style="display:contents">
                <div>
                    <h3 style="color: black;">Productos Disponibles</h3>
                    <button id="regenerateBtn" class="btn btn-warning">Generar nuevos productos</button>
                    <br>
                    <br>
                    <a target="_blank" class="btn btn-info" href="/mockingProducts/create">Agregar un nuevo producto</a>
                </div>
                <br>
                <div class="mb-3">
                    <label for="query" class="form-label" style="color: #34495e;">Buscar productos</label>
                    <input type="text" id="query" class="form-control" oninput="fetchProducts()">
                </div>
                <br>
                <div class="mb-3">
                    <label for="sort" class="form-label" style="color: #34495e;">Ordenar por precio</label>
                    <select id="sort" class="form-select" onchange="fetchProducts()">
                        <option value="">Ninguno</option>
                        <option value="asc">Ascendente</option>
                        <option value="desc">Descendente</option>
                    </select>
                </div>
                <br>
                <div class="mb-3">
                    <label for="limit" class="form-label" style="color: #34495e;">Cantidad a mostrar</label>
                    <select id="limit" class="form-select" onchange="fetchProducts()">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50" selected>50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div>
                    <a href="/mockingProducts" class="text-primary">Limpiar filtros</a>
                </div>
            </div>

            <div class="col-md-9 offset-md-3">
                <div id="error-message" class="alert alert-danger" style="display: none;"></div>
                <nav aria-label="Page navigation">
                    <ul id="pagination" class="pagination justify-content-start"></ul>
                </nav>
                <div id="products" class="row mt-4">
                </div>
                <nav aria-label="Page navigation">
                    <ul id="pagination" class="pagination justify-content-start"></ul>
                </nav>
            </div>
        </div>
    </div>

    <script>
        function formatDate(dateString) {
            const options = { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric', 
                hour: 'numeric', 
                minute: 'numeric', 
            }
            const date = new Date(dateString)
            return date.toLocaleDateString('es-AR', options)
        }
    
        document.addEventListener('DOMContentLoaded', async () => {
            fetchProducts()
        })

        async function fetchProducts(page = 1) {
            const limit = document.getElementById('limit').value
            const sort = document.getElementById('sort').value
            const query = document.getElementById('query').value

            let url = `/api/products/mockingproducts?limit=${limit}&page=${page}`
            if (sort) url += `&sort=${sort}`
            if (query) url += `&query=${query}`

            try {
                const response = await fetch(url)
                const data = await response.json()

                if (data.status === 'success') {
                    const productsDiv = document.getElementById('products')
                    const paginationDiv = document.getElementById('pagination')
                    const errorMessageDiv = document.getElementById('error-message')

                    errorMessageDiv.style.display = 'none'
                    productsDiv.innerHTML = data.payload.map(product => `
                        <div class="col-md-4 mb-4">
                            <div class="card" style="border: 1px solid #3498db; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);">
                                <img src="${product.thumbnail}" class="card-img-top img-fluid" style="height: 200px;" alt="${product.description}"></img>
                                <div class="card-body" style="background-color: #f5f6fa;">
                                    <h5 class="card-title" style="color: #2c3e50;">${product.name}</h5>
                                    <p class="card-text" style="color: #7f8c8d;">${product.description}</p>
                                    <p class="card-text"><strong>Precio:</strong> $${product.price}</p>
                                    <p class="card-text"><strong>Stock:</strong> ${product.stock}</p>
                                    {{#if (equals user.role "user")}}
                                        ${product.stock === 0 ?
                                        `<button class="btn btn-danger" disabled>Sin stock</button>` : 
                                        (product.stock !== 0 ? 
                                            `<button class="add-cart btn btn-info" data-product-id="${product._id}" data-product-stock="${product.stock}">Agregar al carrito</button>` : 
                                            ``)}
                                    {{/if}}
                                </div>
                            </div>
                        </div>
                    `).join('')

                    paginationDiv.innerHTML = `
                        ${data.hasPrevPage ? `<li class="page-item"><a class="page-link" href="#" onclick="fetchProducts(${data.prevPage})">Anterior</a></li>` : ''}
                        <li class="page-item disabled"><a class="page-link" href="#">Página ${data.page} de ${data.totalPages}</a></li>
                        ${data.hasNextPage ? `<li class="page-item"><a class="page-link" href="#" onclick="fetchProducts(${data.nextPage})">Siguiente</a></li>` : ''}
                    `

                    addToCart()
                } else {
                    throw new Error(data.message)
                }
            } catch (error) {
                const errorMessageDiv = document.getElementById('error-message')
                errorMessageDiv.textContent = error.message
                errorMessageDiv.style.display = 'block'
                document.getElementById('products').innerHTML = ''
                document.getElementById('pagination').innerHTML = ''
            }
        }

        function addToCart() {
        document.querySelectorAll('.add-cart').forEach(button => {
            button.addEventListener('click', async (event) => {
                const productId = button.getAttribute('data-product-id')
                const cartId = '{{cartId}}'
                const productStock = parseInt(button.getAttribute('data-product-stock'), 10)

                try {
                    const { value: cantidad } = await Swal.fire({
                        title: 'Selecciona la cantidad',
                        input: 'number',
                        inputLabel: `Cantidad (máximo ${productStock} unidades):`,
                        inputPlaceholder: 'Ingrese la cantidad',
                        inputAttributes: {
                            min: 1,
                            max: productStock,
                            step: 1
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Agregar al carrito',
                        cancelButtonText: 'Cancelar',
                        allowOutsideClick: false,
                        inputValidator: (value) => {
                            const cantidad = parseInt(value, 10)
                            if (!value) {
                                return 'Debes ingresar una cantidad'
                            } else if (cantidad > productStock) {
                                return `Solo puedes agregar hasta ${productStock} unidades`
                            } else if (cantidad < 1) {
                                return 'La cantidad debe ser al menos 1'
                            }
                        }
                    })

                    if (cantidad) {
                        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ productId, cantidad })
                        })
                        const data = await response.json()

                        if (data.status === 'success') {
                            Swal.fire({
                                title: '¡Éxito!',
                                text: 'Producto agregado al carrito.',
                                icon: 'success',
                                showCancelButton: true,
                                confirmButtonText: 'Ir al carrito',
                                cancelButtonText: 'Continuar comprando'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = `/carts/${cartId}`
                                }
                            })
                        } else {
                            Swal.fire('Error', 'no se agrego el producto', 'error')
                        }
                    }
                } catch (error) {
                    Swal.fire('Error', 'Error agregando el producto', 'error')
                }
            })
        })
    }

    document.getElementById('regenerateBtn').addEventListener('click', async () => {
            try {
                const response = await fetch('/api/products/mockingProducts/regenerate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                const data = await response.json()
                if (data.status === 'success') {
                    Swal.fire('Success', data.message, 'success').then(() => {
                        location.reload()
                    })
                } else {
                    Swal.fire('Error', 'Failed to regenerate products', 'error')
                }
            } catch (error) {
                Swal.fire('Error', 'An error occurred', 'error')
            }
        })
    </script>
</body>
